--- a/dist/bin/hb-service.js
+++ b/dist/bin/hb-service.js
@@ -176,7 +176,7 @@ class HomebridgeServiceHelper {
         }
         if (!this.storagePath) {
             if (os.platform() === 'linux' || os.platform() === 'freebsd') {
-                this.storagePath = path.resolve('/var/lib', this.serviceName.toLowerCase());
+                this.storagePath = path.resolve('/opt/var/lib', this.serviceName.toLowerCase());
             }
             else {
                 this.storagePath = path.resolve(os.homedir(), `.${this.serviceName.toLowerCase()}`);
--- a/dist/main.js
+++ b/dist/main.js
@@ -27837,7 +27837,7 @@ let TerminalService = class TerminalServ
             return;
         }
         this.logger.log('Starting terminal session');
-        const shell = await fs.pathExists('/bin/bash') ? '/bin/bash' : '/bin/sh';
+        const shell = await fs.pathExists('/opt/bin/bash') ? '/opt/bin/bash' : '/bin/sh';
         const term = this.nodePtyService.spawn(shell, [], {
             name: 'xterm-color',
             cols: size.cols,
@@ -28705,10 +28705,7 @@ let PluginsService = PluginsService_1 =
     }
     async isUiUpdateBundleAvailable(pluginAction) {
         if ([
-            '/usr/local/lib/node_modules',
-            '/usr/lib/node_modules',
-            '/opt/homebridge/lib/node_modules',
-            '/var/packages/homebridge/target/app/lib/node_modules',
+            '/opt/lib/node_modules',
         ].includes(path.dirname(process.env.UIX_BASE_PATH)) &&
             pluginAction.name === this.configService.name &&
             pluginAction.version !== 'latest') {
@@ -29072,8 +29069,7 @@ let PluginsService = PluginsService_1 =
             }
             else {
                 if ((os.platform() !== 'win32')) {
-                    paths.push('/usr/local/lib/node_modules');
-                    paths.push('/usr/lib/node_modules');
+                    paths.push('/opt/lib/node_modules');
                 }
                 paths.push(...this.getNpmPrefixToSearchPaths());
             }
@@ -29089,7 +29085,7 @@ let PluginsService = PluginsService_1 =
             paths.push(path.join(process.env.APPDATA, 'npm/node_modules'));
         }
         else {
-            paths.push(child_process.execSync('/bin/echo -n "$(npm -g prefix)/lib/node_modules"', {
+            paths.push(child_process.execSync('/opt/bin/echo -n "/opt/lib/node_modules"', {
                 env: Object.assign({
                     npm_config_loglevel: 'silent',
                     npm_update_notifier: 'false',
--- a/dist/modules/platform-tools/terminal/terminal.service.js
+++ b/dist/modules/platform-tools/terminal/terminal.service.js
@@ -30,7 +30,7 @@ let TerminalService = class TerminalServ
             return;
         }
         this.logger.log('Starting terminal session');
-        const shell = await fs.pathExists('/bin/bash') ? '/bin/bash' : '/bin/sh';
+        const shell = await fs.pathExists('/opt/bin/bash') ? '/opt/bin/bash' : '/bin/sh';
         const term = this.nodePtyService.spawn(shell, [], {
             name: 'xterm-color',
             cols: size.cols,
--- a/dist/modules/plugins/plugins.service.js
+++ b/dist/modules/plugins/plugins.service.js
@@ -415,10 +415,7 @@ let PluginsService = PluginsService_1 =
     }
     async isUiUpdateBundleAvailable(pluginAction) {
         if ([
-            '/usr/local/lib/node_modules',
-            '/usr/lib/node_modules',
-            '/opt/homebridge/lib/node_modules',
-            '/var/packages/homebridge/target/app/lib/node_modules',
+            '/opt/lib/node_modules',
         ].includes(path.dirname(process.env.UIX_BASE_PATH)) &&
             pluginAction.name === this.configService.name &&
             pluginAction.version !== 'latest') {
@@ -782,8 +779,7 @@ let PluginsService = PluginsService_1 =
             }
             else {
                 if ((os.platform() !== 'win32')) {
-                    paths.push('/usr/local/lib/node_modules');
-                    paths.push('/usr/lib/node_modules');
+                    paths.push('/opt/lib/node_modules');
                 }
                 paths.push(...this.getNpmPrefixToSearchPaths());
             }
@@ -799,7 +795,7 @@ let PluginsService = PluginsService_1 =
             paths.push(path.join(process.env.APPDATA, 'npm/node_modules'));
         }
         else {
-            paths.push(child_process.execSync('/bin/echo -n "$(npm -g prefix)/lib/node_modules"', {
+            paths.push(child_process.execSync('/opt/bin/echo -n "/opt/lib/node_modules"', {
                 env: Object.assign({
                     npm_config_loglevel: 'silent',
                     npm_update_notifier: 'false',
